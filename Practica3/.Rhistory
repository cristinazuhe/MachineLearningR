nrow(Predictoras)*0.2
20/nrow(Predictoras)
nrow(Predictoras)
nrow(Predictoras)*0.2
nrow(Predictoras)%/%2
nrow(Predictoras)%/%0.2
nrow(Predictoras)%/%20
2000%/%nrow(Predictoras)
20*nrow(Predictoras)%/%100
2*nrow(Predictoras)%/%10
2*nrow(Predictoras)%/%10
sample(1:nrow(Predictoras),2*nrow(Predictoras)%/%10)
Predictoras_test = sample(1:nrow(Predictoras),2*nrow(Predictoras)%/%10)
Predictoras_train = Predictoras[-Predictoras_test,]
View(Predictoras_train)
View(Predictoras_train)
nuevo = sample(1:nrow(Predictoras),2*nrow(Predictoras)%/%10)
nuevo = as.data(sample(1:nrow(Predictoras),2*nrow(Predictoras)%/%10))
nuevo = data(sample(1:nrow(Predictoras),2*nrow(Predictoras)%/%10))
nuevo = data.frame(sample(1:nrow(Predictoras),2*nrow(Predictoras)%/%10))
nuevo = data.matrix(sample(1:nrow(Predictoras),2*nrow(Predictoras)%/%10))
nuevo = data.matrix(sample(1:nrow(Predictoras),2*nrow(Predictoras)%/%10))
nuevo = data.matrix(sample(1:nrow(Predictoras),2*nrow(Predictoras)%/%10))
nuevo = data.matrix(sample(1:nrow(Predictoras),2*nrow(Predictoras)%/%10))
nuevo = data.matrix(sample(1:nrow(Predictoras),2*nrow(Predictoras)%/%10))
Predictoras_test = sample(1:nrow(Predictoras),2*nrow(Predictoras)%/%10)
Predictoras_train = Predictoras[-Predictoras_test,]
Predictoras = cbind(Auto$mpg, Auto$cylinders, Auto$horsepower, Auto$acceleration, Auto$year)
colnames(Predictoras) = c("mpg", "cylinders", "horsepowe", "acceleration", "year")
Predictoras_test = sample(1:nrow(Predictoras),2*nrow(Predictoras)%/%10)
Predictoras_train = Predictoras[-Predictoras_test,]
nuevo = Predictoras[Predictoras_test,]
View(nuevo)
View(nuevo)
View(Predictoras_train)
View(Predictoras_train)
Predictoras
Predictoras_test
Predictoras[1,]
Predictoras[Predictoras_test,]
Predictoras[270,]
Predictoras = cbind(Auto$mpg, Auto$cylinders, Auto$horsepower, Auto$acceleration, Auto$year)
colnames(Predictoras) = c("mpg", "cylinders", "horsepowe", "acceleration", "year")
indices_test = sample(1:nrow(Predictoras),2*nrow(Predictoras)%/%10)
Predictoras_test = Predictoras[indices_test,]
Predictoras_train = Predictoras[-Predictoras_test,]
Predictoras = cbind(Auto$mpg, Auto$cylinders, Auto$horsepower, Auto$acceleration, Auto$year)
colnames(Predictoras) = c("mpg", "cylinders", "horsepowe", "acceleration", "year")
indices_test = sample(1:nrow(Predictoras),2*nrow(Predictoras)%/%10)
Predictoras_test = Predictoras[indices_test,]
Predictoras_train = Predictoras[-indices_test,]
View(Predictoras_test)
View(Predictoras_test)
vector_mpg = as.vector(Auto[,1])
mediana_mpg = median(as.vector(Auto[,1]))
mediana_mpg = median(Auto$mpg)
mediana_mpg = median(Auto$mpg)
mediana_mpg = median(Auto$mpg)
rep(1, dim(Predictoras_train)[1])
cbind(Predictoras_train, rep(1,dim(Predictoras_train)[1]))
mediana_mpg = median(Auto$mpg)
Predictoras_train = cbind(Predictoras_train, rep(1,dim(Predictoras_train)[1]))
mediana_mpg = median(Auto$mpg)
Predictoras_train = cbind(Predictoras_train, rep(1,dim(Predictoras_train)[1]))
Predictoras_test = cbind(Predictoras_test, rep(1,dim(Predictoras_test)[1]))
mediana_mpg = median(Auto$mpg)
Predictoras_train = cbind(Predictoras_train, rep(1,dim(Predictoras_train)[1]))
Predictoras_test = cbind(Predictoras_test, rep(1,dim(Predictoras_test)[1]))
Predictoras_test = cbind(Predictoras_test, rep(1,dim(Predictoras_test)[1]))
Predictoras = cbind(Auto$mpg, Auto$cylinders, Auto$horsepower, Auto$acceleration, Auto$year)
colnames(Predictoras) = c("mpg", "cylinders", "horsepowe", "acceleration", "year")
indices_test = sample(1:nrow(Predictoras),2*nrow(Predictoras)%/%10)
Predictoras_test = Predictoras[indices_test,]
Predictoras_train = Predictoras[-indices_test,]
mediana_mpg = median(Auto$mpg)
Predictoras_train = cbind(Predictoras_train, rep(1,dim(Predictoras_train)[1]))
Predictoras_test = cbind(Predictoras_test, rep(1,dim(Predictoras_test)[1]))
mediana_mpg = median(Auto$mpg)
Predictoras_train = cbind(Predictoras_train, rep(1,dim(Predictoras_train)[1]))
Predictoras_test = cbind(Predictoras_test, rep(1,dim(Predictoras_test)[1]))
colnames(Predictoras_train)[dim(Predictoras_train)[2]] = "mpg01"
data.frame(mpg01=sign(median(Auto$mpg)-Auto$mpg), Auto)
Auto1 = data.frame(mpg01=sign(median(Auto$mpg)-Auto$mpg), Auto)
print(Auto1$mpg01)
View(Auto1)
View(Auto1)
#plot(Auto$cylinders,Auto$weight)
Predictoras1 = data.frame(mpg01=sign(median(Predictoras$mpg)-Predictoras$mpg), Predictoras)
print(Predictoras$mpg01)
Auto
Auto$mpg
Predictoras$mpg
Predictoras
Predictoras[1,]
Predictoras[1,mpg]
Predictoras[1,"mpg"]
Predictoras[,"mpg"]
#plot(Auto$cylinders,Auto$weight)
Predictoras1 = data.frame(mpg01=sign(median(Predictoras[,mpg])-Predictoras[,mpg]), Predictoras)
print(Predictoras$mpg01)
Predictoras[,"mpg"]
median(Predictoras[,"mpg"])
mpg01=sign(median(Predictoras[,mpg])-Predictoras[,mpg])
median(Predictoras[,mpg])-Predictoras[,mpg]
median(Predictoras[,mpg])
median(Predictoras[,"mpg"])
mpg01=sign(median(Predictoras[,mpg])-Predictoras[,mpg""])
mpg01=sign(median(Predictoras[,"mpg"])-Predictoras[,"mpg"])
#plot(Auto$cylinders,Auto$weight)
Predictoras1 = data.frame(mpg01=sign(median(Predictoras[,"mpg"])-Predictoras[,"mpg"]), Predictoras)
print(Predictoras$mpg01)
View(Predictoras1)
View(Predictoras1)
#plot(Auto$cylinders,Auto$weight)
Predictoras_train_mpg01 = data.frame(mpg01=sign(mediana_mpg-Predictoras_train[,"mpg"]), Predictoras_train)
Predictoras = cbind(Auto$mpg, Auto$cylinders, Auto$horsepower, Auto$acceleration, Auto$year)
colnames(Predictoras) = c("mpg", "cylinders", "horsepowe", "acceleration", "year")
indices_test = sample(1:nrow(Predictoras),2*nrow(Predictoras)%/%10)
Predictoras_test = Predictoras[indices_test,]
Predictoras_train = Predictoras[-indices_test,]
mediana_mpg = median(Auto$mpg)
Predictoras_train_mpg01 = data.frame(mpg01=sign(mediana_mpg-Predictoras_train[,"mpg"]),  Predictoras_train)
Predictoras_test_mpg01 = data.frame(mpg01=sign(mediana_mpg-Predictoras_test[,"mpg"]), Predictoras_test)
View(Predictoras_test_mpg01)
View(Predictoras_test_mpg01)
View(Predictoras_test)
View(Predictoras_test)
mediana_mpg = median(Auto$mpg)
Predictoras_train_mpg01 = data.frame(mpg01=sign(Predictoras_train[,"mpg"] - mediana_mpg),  Predictoras_train)
Predictoras_test_mpg01 = data.frame(mpg01=sign(Predictoras_test[,"mpg"] - mediana_mpg), Predictoras_test)
Pedictorias_train
Pedictoras_train_mpg01
Predictoras_train_mpg01
mediana_mpg = median(Auto$mpg)
Predictoras_train_mpg01 = data.frame(Predictoras_train,
mpg01=sign(Predictoras_train[,"mpg"] - mediana_mpg))
Predictoras_test_mpg01 = data.frame(mpg01=sign(Predictoras_test[,"mpg"] - mediana_mpg), Predictoras_test)
View(Predictoras_train_mpg01)
View(Predictoras_train_mpg01)
mediana_mpg = median(Auto$mpg)
Predictoras_train_mpg01 = data.frame(Predictoras_train,
mpg01=sign(Predictoras_train[,"mpg"] - mediana_mpg))
Predictoras_test_mpg01 = data.frame(Predictoras_test,
mpg01=sign(Predictoras_test[,"mpg"] - mediana_mpg))
print(Predictoras)
print(Predictoras[1,2,3,4,5])
print(Predictoras[c(1,2,3,4,5)])
print(Predictoras[c(1,2,3,4,5)],)
print(Predictoras[c(1,2,3,4,5),])
Predictoras = cbind(Auto$mpg, Auto$cylinders, Auto$horsepower, Auto$acceleration, Auto$year)
colnames(Predictoras) = c("mpg", "cylinders", "horsepower", "acceleration", "year")
indices_test = sample(1:nrow(Predictoras),2*nrow(Predictoras)%/%10)
Predictoras_test = Predictoras[indices_test,]
Predictoras_train = Predictoras[-indices_test,]
mediana_mpg = median(Auto$mpg)
Predictoras_train_mpg01 = data.frame(Predictoras_train,
mpg01=sign(Predictoras_train[,"mpg"] - mediana_mpg))
Predictoras_test_mpg01 = data.frame(Predictoras_test,
mpg01=sign(Predictoras_test[,"mpg"] - mediana_mpg))
ajuste_rl <- glm(mpg01-cylinders+horsepowe+acceleration+year,
data= Predictoras_test_mpg01, family=binomial)
ajuste_rl <- glm(acceleration+year,
data= Predictoras_test_mpg01, family=binomial)
ajuste_rl <- glm("acceleration"+year,
data= Predictoras_test_mpg01, family=binomial)
ajuste_rl <- glm("acceleration"+"year"",
data= Predictoras_test_mpg01, family=binomial)
ajuste_rl <- glm("acceleration"+"year",
data= Predictoras_test_mpg01, family=binomial)
ajuste_rl <- glm("mpg01"~"acceleration"+"year",
data= Predictoras_test_mpg01, family=binomial)
ajuste_rl <- glm(mpg01 ~ year,
data= Predictoras_test_mpg01, family=binomial)
ajuste_rl <- glm(mpg01 ~ acceleration + year,
data= Predictoras_test_mpg01, family=binomial)
Predictoras_test_mpg01
ajuste_rl <- glm(mpg01 ~ acceleration + year,
data= Predictoras_test_mpg01, family=binomial)
Predictoras_test_mpg01
(Predictoras_test_mpg01[,"mpg01"])
if(Predictoras_test_mpg01[,"mpg01"])==-1
if(Predictoras_test_mpg01[,"mpg01"])=-1
if(Predictoras_test_mpg01[,"mpg01"]==-1)
(Predictoras_test_mpg01[,"mpg01"]=0)
(Predictoras_test_mpg01[,"mpg01"]==-1)
(Predictoras_test_mpg01[,"mpg01"]
)4
(Predictoras_test_mpg01[,"mpg01"])
(Predictoras_test_mpg01[1,"mpg01"])
(Predictoras_test_mpg01[3,"mpg01"])
for(i in 1:nrow(Predictoras_test_mpg01)){
if((Predictoras_test_mpg01[i,"mpg01"]) == -1)
Predictoras_test_mpg01[i,"mpg01"]) = 0
}
for(i in 1:nrow(Predictoras_test_mpg01)){
if((Predictoras_test_mpg01[i,"mpg01"]) == -1)
Predictoras_test_mpg01[i,"mpg01"] = 0
}
Predictoras_test_mpg01
for(i in 1:nrow(Predictoras_test_mpg01)){
if((Predictoras_test_mpg01[i,"mpg01"]) == -1)
Predictoras_test_mpg01[i,"mpg01"] = 0
}
View(Predictoras_test_mpg01)
View(Predictoras_test_mpg01)
ajuste_rl <- glm(mpg01 ~ acceleration + year,
data= Predictoras_test_mpg01, family=binomial)
for(i in 1:nrow(Predictoras_test_mpg01)){
if((Predictoras_test_mpg01[i,"mpg01"]) == -1)
Predictoras_test_mpg01[i,"mpg01"] = 0
}
for(i in 1:nrow(Predictoras_train_mpg01)){
if((Predictoras_train_mpg01[i,"mpg01"]) == -1)
Predictoras_train_mpg01[i,"mpg01"] = 0
}
View(Predictoras_test_mpg01)
ajuste_rl <- glm(mpg01 ~ cylinders +  horsepower + acceleration + year,
data= Predictoras_test_mpg01, family=binomial)
ajuste_rl <- glm(mpg01 ~  horsepower + acceleration + year,
data= Predictoras_test_mpg01, family=binomial)
ajuste_rl <- glm(mpg01 ~ cylinders + horsepower + acceleration + year,
ajuste_rl <- glm(mpg01 ~ cylinders + horsepower + acceleration + year,
data= Predictoras_test_mpg01, family=binomial)
ajuste_rl <- glm(mpg01 ~ cylinders + horsepower + acceleration + year,
data= Predictoras_test_mpg01, family=binomial)
ajuste_rl <- glm(mpg01 ~ horsepower + acceleration + year,
data= Predictoras_test_mpg01, family=binomial)
ajuste_rl <- glm(mpg01 ~ horsepower + acceleration + year,
data= Predictoras_test_mpg01, family=binomial)
ajuste_rl <- glm(mpg01 ~ horsepower + acceleration + year,
data= Predictoras_test_mpg01, family=binomial)
ajuste_rl <- glm(mpg01 ~ cylinders +  horsepower + acceleration + year,
data= Predictoras_test_mpg01, family=binomial)
ajuste_rl <- glm(mpg01 ~ horsepower + acceleration + year,
data= Predictoras_test_mpg01, family=binomial)
Predictoras_test_mpg01
probabilidades = predict(ajuste_rl, Predictoras_test_mpg01, type="response")
probabilidades = predict(ajuste_rl, Predictoras_test_mpg01, type="response")
probabilidades = predict(ajuste_rl, Predictoras_test_mpg01, type="response")
num_datos_test = dim(Predictoras_test_mpg01)[1]
vector_predicciones = rep(1,num_datos_test)
vector_predicciones[probabilidades<0.5] = 0
matriz_confusion = table(vector_predicciones, Predictoras_test_mpg01$mpg01)
print(matriz_confusion)
matriz_confusion = table(vector_predicciones, Predictoras_test_mpg01$mpg01)
print(matriz_confusion)
error = (matriz_confusion[1,2] + matriz_confusion[2,1])/sum(matriz_confusion)
print(error)
matriz_confusion = table(vector_predicciones, Predictoras_test_mpg01$mpg01)
print(matriz_confusion)
error = (matriz_confusion[1,2] + matriz_confusion[2,1])/sum(matriz_confusion)
print(error)
ajuste_rl <- glm(mpg01 ~ cylinders + horsepower + acceleration + year,
data= Predictoras_test_mpg01, family=binomial)
probabilidades = predict(ajuste_rl, Predictoras_test_mpg01, type="response")
num_datos_test = dim(Predictoras_test_mpg01)[1]
vector_predicciones = rep(1,num_datos_test)
vector_predicciones[probabilidades<0.5] = 0
matriz_confusion = table(vector_predicciones, Predictoras_test_mpg01$mpg01)
print(matriz_confusion)
error = (matriz_confusion[1,2] + matriz_confusion[2,1])/sum(matriz_confusion)
print(error)
Predictoras = cbind(Auto$mpg, Auto$cylinders, Auto$horsepower, Auto$acceleration, Auto$year)
colnames(Predictoras) = c("mpg", "cylinders", "horsepower", "acceleration", "year")
indices_test = sample(1:nrow(Predictoras),2*nrow(Predictoras)%/%10)
Predictoras_test = Predictoras[indices_test,]
Predictoras_train = Predictoras[-indices_test,]
mediana_mpg = median(Auto$mpg)
Predictoras_train_mpg01 = data.frame(Predictoras_train,
mpg01=sign(Predictoras_train[,"mpg"] - mediana_mpg))
Predictoras_test_mpg01 = data.frame(Predictoras_test,
mpg01=sign(Predictoras_test[,"mpg"] - mediana_mpg))
for(i in 1:nrow(Predictoras_test_mpg01)){
if((Predictoras_test_mpg01[i,"mpg01"]) == -1)
Predictoras_test_mpg01[i,"mpg01"] = 0
}
for(i in 1:nrow(Predictoras_train_mpg01)){
if((Predictoras_train_mpg01[i,"mpg01"]) == -1)
Predictoras_train_mpg01[i,"mpg01"] = 0
}
ajuste_rl <- glm(mpg01 ~ cylinders + horsepower + acceleration + year,
data= Predictoras_test_mpg01, family=binomial)
probabilidades = predict(ajuste_rl, Predictoras_test_mpg01, type="response")
num_datos_test = dim(Predictoras_test_mpg01)[1]
vector_predicciones = rep(1,num_datos_test)
vector_predicciones[probabilidades<0.5] = 0
matriz_confusion = table(vector_predicciones, Predictoras_test_mpg01$mpg01)
print(matriz_confusion)
error = (matriz_confusion[1,2] + matriz_confusion[2,1])/sum(matriz_confusion)
print(error)
probabilidades = predict(ajuste_rl, Predictoras_test_mpg01, type="response")
vector_predicciones = rep(1,dim(Predictoras_test_mpg01)[1])
vector_predicciones[probabilidades<0.5] = 0
matriz_confusion = table(vector_predicciones, Predictoras_test_mpg01$mpg01)
print(matriz_confusion)
error = (matriz_confusion[1,2] + matriz_confusion[2,1])/sum(matriz_confusion)
print(error)
probabilidades
vector_predicciones
probabilidades = predict(ajuste_rl, Predictoras_test_mpg01, type="response")
probabilidades01 = rep(1,dim(Predictoras_test_mpg01)[1])
probabilidades01[probabilidades<0.5] = 0
library(class)
library(e1071)
install.packages("e1071")
library(e1071)
library(class)
library(e1071)
columna_clase = dim(Predictoras_train_mpg01)[2]
clase_train = Predictoras_train_mpg01[, columna_clase]
print(columna_clase)
Predictoras_train_mpg01
Predictoras_train_mpg01[,6]
mpg01_train = Predictoras_train_mpg01[, dim(Predictoras_train_mpg01)[2]]
mpg01_train = Predictoras_train_mpg01[, dim(Predictoras_train_mpg01)[2]]
mpg01_test = Predictoras_test_mpg01[, dim(Predictoras_test_mpg01)[2]]
mpg01_train = Predictoras_train_mpg01[, dim(Predictoras_train_mpg01)[2]]
mpg01_test = Predictoras_test_mpg01[, dim(Predictoras_test_mpg01)[2]]
mpg01_ambos = c(mpg01_train, mpg01_test)
columnas=  dim(Predictoras_train_mpg01)[2]
mpg01_train = Predictoras_train_mpg01[,columnas]
mpg01_test = Predictoras_test_mpg01[,columnas]
mpg01_ambos = c(mpg01_train, mpg01_test)
matriz_normalizada = scale(rbind(Predictoras_train_mpg01[,-columnas],
Predictoras_test_mpg01[,-columnas]))
View(matriz_normalizada)
View(matriz_normalizada)
columnas=  dim(Predictoras_train_mpg01)[2]
mpg01_train = Predictoras_train_mpg01[,columnas]
mpg01_test = Predictoras_test_mpg01[,columnas]
mpg01_ambos = c(mpg01_train, mpg01_test)
matriz_normalizada = (rbind(Predictoras_train_mpg01[,-columnas],
Predictoras_test_mpg01[,-columnas]))
rbind(Predictoras_train_mpg01[,-columnas]
rbind(Predictoras_train_mpg01[,-columnas])
rbind(Predictoras_train_mpg01[,-columnas])
Predictoras_train_mpg01[,-columnas])
Predictoras_train_mpg01[,-columnas]
Predictoras_train_mpg01[,-6]
Predictoras_train_mpg01
Predictoras_train_mpg01[,6]
Predictoras_train_mpg01[,-6]
Predictoras_train_mpg01
Predictoras_train_mpg01[,-6]
Predictoras_train_mpg01[,1]
Predictoras_train_mpg01[,2]
Predictoras_train_mpg01[,3]
Predictoras_train_mpg01[,-1]
Predictoras_train_mpg01[,-2]
Predictoras_train_mpg01[,-3]
Predictoras_train_mpg01[,-4]
Predictoras_train_mpg01[,-5]
Predictoras_train_mpg01[,-6]
Predictoras_train_mpg01[,-7]
(rbind(Predictoras_train_mpg01[,-columnas],
Predictoras_test_mpg01[,-columnas]))
scale(rbind(Predictoras_train_mpg01[,-columnas],
Predictoras_test_mpg01[,-columnas]))
columnas=  dim(Predictoras_train_mpg01)[2]
mpg01_train = Predictoras_train_mpg01[,columnas]
mpg01_test = Predictoras_test_mpg01[,columnas]
mpg01_ambos = c(mpg01_train, mpg01_test)
matriz_normalizada = scale(rbind(Predictoras_train_mpg01[,-columnas],
Predictoras_test_mpg01[,-columnas]))
columnas=  dim(Predictoras_train_mpg01)[2]
mpg01_train = Predictoras_train_mpg01[,columnas]
mpg01_test = Predictoras_test_mpg01[,columnas]
mpg01_ambos = c(mpg01_train, mpg01_test)
datos_normalizados = scale(rbind(Predictoras_train_mpg01[,-columnas],
Predictoras_test_mpg01[,-columnas]))
train_normalizada = datos_normalizados[1:dim(Predictoras_train_mpg01)[1],]
View(train_normalizada)
View(train_normalizada)
columnas=  dim(Predictoras_train_mpg01)[2]
mpg01_train = Predictoras_train_mpg01[,columnas]
mpg01_test = Predictoras_test_mpg01[,columnas]
mpg01_ambos = c(mpg01_train, mpg01_test)
datos_normalizados = scale(rbind(Predictoras_train_mpg01[,-columnas],
Predictoras_test_mpg01[,-columnas]))
train_normalizada = datos_normalizados[1:dim(Predictoras_train_mpg01)[1],]
test_normalizada = datos_normalizados[(dim(Predictoras_train_mpg01)[1] + 1):dim(datos_normalizados)[1],]
columnas=  dim(Predictoras_train_mpg01)[2]
mpg01_train = Predictoras_train_mpg01[,columnas]
mpg01_test = Predictoras_test_mpg01[,columnas]
mpg01_ambos = c(mpg01_train, mpg01_test)
datos_normalizados = scale(rbind(Predictoras_train_mpg01[,-columnas],
Predictoras_test_mpg01[,-columnas]))
train_normalizada = datos_normalizados[1:dim(Predictoras_train_mpg01)[1],]
test_normalizada = datos_normalizados[(dim(Predictoras_train_mpg01)[1] + 1):
dim(datos_normalizados)[1],]
datos_normalizados = scale(rbind(Predictoras_train_mpg01[,-columnas],
Predictoras_test_mpg01[,-columnas]))
train_normalizada = datos_normalizados[1:dim(Predictoras_train_mpg01)[1],]
test_normalizada = datos_normalizados[(dim(Predictoras_train_mpg01)[1] + 1):
dim(datos_normalizados)[1],]
columnas=  dim(Predictoras_train_mpg01)[2]
mpg01_train = Predictoras_train_mpg01[,columnas]
mpg01_test = Predictoras_test_mpg01[,columnas]
mpg01_ambos = c(mpg01_train, mpg01_test)
View(datos_normalizados)
View(datos_normalizados)
otra = datos_normalizados[1:dim(Predictoras_train_mpg01)[1],]
View(otra)
View(otra)
View(test_normalizada)
View(test_normalizada)
View(train_normalizada)
View(train_normalizada)
train_normalizada = datos_normalizados[indices_test,]
datos_normalizados = scale(rbind(Predictoras_train_mpg01[,-columnas],
Predictoras_test_mpg01[,-columnas]))
test_normalizada = datos_normalizados[indices_test,]
train_normalizada = datos_normalizados[(dim(Predictoras_train_mpg01)[1] + 1):
dim(datos_normalizados)[1],]
datos_normalizados[(dim(Predictoras_train_mpg01)[1] + 1):
dim(datos_normalizados)[1],]
uno = datos_normalizados[indices_test,]
indices_test
nrow(Predictoras_train)
1:nrow(Predictoras_train)
1:nrow(Predictoras_train) - indices_test
indices_train
indices_Test
indices_test
1:nrow(Predictoras_train)
indices_test
1:nrow(Predictoras_train) != indices_test
1:nrow(Predictoras_train)
indices_test
datos_normalizados
test_normalizada
datos_normalizados - test_normalizada
datos_normalizados[,]
datos_normalizados[,-test_normalizada]
datos_normalizados[-test_normalizada,]
indices_test
View(datos_normalizados)
View(datos_normalizados)
View(test_normalizada)
View(test_normalizada)
datos_normalizados - test_normalizada
datos_normalizados
datos_normalizados[(dim(-indices_test,]
datos_normalizados[dim(-indices_test),]
datos_normalizados[-indices_test,]
datos_normalizados = scale(rbind(Predictoras_train_mpg01[,-columnas],
Predictoras_test_mpg01[,-columnas]))
test_normalizada = datos_normalizados[indices_test,]
train_normalizada = datos_normalizados[-indices_test,]
datos_normalizados = scale(rbind(Predictoras_train_mpg01[,-columnas],
Predictoras_test_mpg01[,-columnas]))
test_normalizada = datos_normalizados[indices_test,]
train_normalizada = datos_normalizados[-indices_test,]
posibles_k <- tune.knn(datos_normalizados, as.factor(mpg01_ambos), k=1:15,
tune.control(sampling = "cross"))
posibles_k <- tune.knn(datos_normalizados, as.factor(mpg01_ambos), k=1:20,
tunecontrol = tune.control(sampling = "cross"))
posibles_k <- tune.knn(datos_normalizados, as.factor(mpg01_ambos), k=1:15,
tunecontrol = tune.control(sampling = "cross"))
posibles_k <- tune.knn(datos_normalizados, as.factor(mpg01_ambos), k=1:15,
tune_control = tune.control(sampling = "cross"))
posibles_k <- tune.knn(datos_normalizados, as.factor(mpg01_ambos), k=1:15,
tune_control = tune.control(sampling = "cross"))
summary(posibles_k)
posibles_k <- tune.knn(datos_normalizados, as.factor(mpg01_ambos), k=1:10,
tune_control = tune.control(sampling = "cross"))
summary(posibles_k)
predcciones = knn(train_normalizada, test_normalizada, mpg01_train, k=3)
predicciones = knn(train_normalizada, test_normalizada, mpg01_train, k=3)
matriz_confusion_knn = table(predicciones, mpg01_test)
predicciones = knn(train_normalizada, test_normalizada, mpg01_train, k=3)
matriz_confusion_knn = table(predicciones, mpg01_test)
print(matriz_confusion_knn)
predicciones = knn(train_normalizada, test_normalizada, mpg01_train, k=3)
matriz_confusion_knn = table(predicciones, mpg01_test)
print(matriz_confusion_knn)
errorknn = (matriz_confusion_knn[1,2] + matriz_confusion_knn[2,1])/sum(matriz_confusion_knn))
errorknn = ((matriz_confusion_knn[1,2] + matriz_confusion_knn[2,1])/sum(matriz_confusion_knn))
errorknn = ((matriz_confusion_knn[1,2] + matriz_confusion_knn[2,1])/sum(matriz_confusion_knn))
print(errorknn)
errorknn = ((matriz_confusion_knn[1,2] + matriz_confusion_knn[2,1])/sum(matriz_confusion_knn))
print(errorknn)
library(ISLR)
library(tree)
names(OJ)
set.seed(1013)
indices_train800 = sample(nrow(OJ),800)
trainOJ = OJ[indices_train800,]
testOJ = OJ[-indices_train800,]
treeOJ = tree(Purchase~. ,data = trainOJ)
summary(treeOJ)
plot(treeOJ)
text(treeOJ, pretty = 0)
probabilidades = predict(treeOJ, testOJ, type="class")
matriz_confusion = table(testOJ$Purchase, probabilidades)
print(matriz_confusion)
error = (matriz_confusion[1,2] + matriz_confusion[2,1])/sum(matriz_confusion)
print(error)
cvtreeOJ = cv.tree(treeOJ, FUN= prune.misclass)
cvtreeOJ
plot(cvtreeOJ$size, cvtreeOJ$dev, type = "b", xlab = "Tree Size", ylab = "Deviance")
probabilidades = predict(treeOJ, testOJ, type="class")
matriz_confusion = table(testOJ$Purchase, probabilidades)
print(matriz_confusion)
error = (matriz_confusion[1,2] + matriz_confusion[2,1])/sum(matriz_confusion)
print(error)
cvtreeOJ = cv.tree(treeOJ, FUN= prune.tree)
cvtreeOJ
plot(cvtreeOJ$size, cvtreeOJ$dev, type = "b", xlab = "Tree Size", ylab = "Deviance")
cvtreeOJ = cv.tree(treeOJ, FUN= prune.tree)
cvtreeOJ
plot(cvtreeOJ$size, cvtreeOJ$dev, type = "b", xlab = "Tree Size", ylab = "Deviance")
