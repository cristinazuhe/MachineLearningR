Boston[,1]
Boston[,-1]
crim = as.matrix(Boston[,1]
lambdas = cv.glmnet(x = as.matrix(Boston[,-1]), y = as.matrix(Boston[,1]), alpha=1)
crim = as.matrix(Boston[,1])
lambdas = cv.glmnet(x = as.matrix(Boston[,-1]), y = as.matrix(Boston[,1]), alpha=1)
crim
Boston-crim
Boston_solocrim = as.matrix(Boston[,1])
Boston_sinCrim = as.matrix(Boston[,-1])
lambdas = cv.glmnet(x = as.matrix(Boston[,-1]), y = as.matrix(Boston[,1]), alpha=1)
Boston_solocrim = as.matrix(Boston[,1])
Boston_sinCrim = as.matrix(Boston[,-1])
lambdas = cv.glmnet(x = Boston_sinCrim, y = Boston_solocrim, alpha=1)
plot(lambdas)
lambdas$lambda.min
lambdas
Boston_sinCrim = as.matrix(Boston[,-1])
Boston_solocrim = as.matrix(Boston[,1])
lambdas = glmnet(x = Boston_sinCrim, y = Boston_solocrim, alpha=1)
Boston_sinCrim = as.matrix(Boston[,-1])
Boston_solocrim = as.matrix(Boston[,1])
lambdas = glmnet(x = Boston_sinCrim, y = Boston_solocrim, alpha=1)
plot(lambdas)
Boston_sinCrim = as.matrix(Boston[,-1])
Boston_solocrim = as.matrix(Boston[,1])
lambdas = glmnet(x = Boston_sinCrim, y = Boston_solocrim, alpha=1)
plot(lambdas)
Boston_sinCrim = as.matrix(Boston[,-1])
Boston_solocrim = as.matrix(Boston[,1])
lambdas = cv.glmnet(x = Boston_sinCrim, y = Boston_solocrim, alpha=1)
plot(lambdas)
Boston_sinCrim = as.matrix(Boston[,-1])
Boston_solocrim = as.matrix(Boston[,1])
lambdas = glmnet(x = Boston_sinCrim, y = Boston_solocrim, alpha=1)
plot(lambdas)
Boston_sinCrim = as.matrix(Boston[,-1])
Boston_solocrim = as.matrix(Boston[,1])
lambdas = cv.glmnet(x = Boston_sinCrim, y = Boston_solocrim, alpha=1)
plot(lambdas)
library(MASS)
attach(Boston)
crim01 = rep(0, length(crim))
crim01[crim>median(crim)] = 1
Boston2 = data.frame(Boston, crim01)
f = nrow(Boston2)
a = round(f*0.8)
train.index=sample(f, a, replace=FALSE)
train = Boston2[train.index, ]
test = Boston2[-train.index, ]
View(Boston2)
View(Boston2)
Boston2[1,]
library(randomForest)
library(MASS)
library("glmnet")
set.seed(2)
mediana_crim = median(Boston$crim)
Boston_crim01 = data.frame(Boston, crim01=sign(Boston[,"crim"] - mediana_crim))
View(Boston_crim01)
library(randomForest)
library(MASS)
library("glmnet")
set.seed(2)
mediana_crim = median(Boston$crim)
Boston_crim01 = data.frame(Boston, crim01=sign(Boston[,"crim"] - mediana_crim))
indices_train = sample(nrow(Boston_crim01), 8*nrow(Boston_crim01)%/%10, replace=FALSE)
Boston_train_crim01 = Predictoras[indices_train,]
Predictoras_test_crim01 = Predictoras[-indices_train,]
library(randomForest)
library(MASS)
library("glmnet")
set.seed(2)
mediana_crim = median(Boston$crim)
Boston_crim01 = data.frame(Boston, crim01=sign(Boston[,"crim"] - mediana_crim))
indices_train = sample(nrow(Boston_crim01), 8*nrow(Boston_crim01)%/%10, replace=FALSE)
Boston_train_crim01 = Boston_crim01[indices_train,]
Predictoras_test_crim01 = Boston_crim01[-indices_train,]
library(randomForest)
library(MASS)
library("glmnet")
set.seed(2)
mediana_crim = median(Boston$crim)
Boston_crim01 = data.frame(Boston, crim01=sign(Boston[,"crim"] - mediana_crim))
indices_train = sample(nrow(Boston_crim01), 8*nrow(Boston_crim01)%/%10, replace=FALSE)
Boston_train_crim01 = Boston_crim01[indices_train,]
Boston_test_crim01 = Boston_crim01[-indices_train,]
View(Boston_train_crim01)
View(Boston_train_crim01)
library(MASS)
attach(Boston)
crim01 = rep(0, length(crim))
crim01[crim>median(crim)] = 1
Boston2 = data.frame(Boston, crim01)
f = nrow(Boston2)
a = round(f*0.8)
train.index=sample(f, a, replace=FALSE)
train = Boston2[train.index, ]
test = Boston2[-train.index, ]
train
train[1,รง]
train[1,]
model.matrix(crim~.-crim-crim01, data=train)[,-1]
library(randomForest)
library(MASS)
library("glmnet")
set.seed(2)
mediana_crim = median(Boston$crim)
Boston_crim01 = data.frame(Boston, crim01=sign(Boston[,"crim"] - mediana_crim))
indices_train = sample(nrow(Boston_crim01), 8*nrow(Boston_crim01)%/%10, replace=FALSE)
Boston_train_crim01 = Boston_crim01[indices_train,]
Boston_test_crim01 = Boston_crim01[-indices_train,]
Boston_sinCrim = as.matrix(Boston_train_crim01[,-1])
Boston_solocrim = as.matrix(Boston_train_crim01[,1])
lambdas = cv.glmnet(x = Boston_sinCrim, y = Boston_solocrim, alpha=1)
plot(lambdas)
View(Boston_solocrim)
View(Boston_solocrim)
View(Boston_sinCrim)
View(Boston_sinCrim)
View(Boston_crim01)
View(Boston_crim01)
Boston_sinCrim = model.matrix(crim~.-crim-crim01, data=Boston_train_crim01)[,-1]
Boston_solocrim = as.matrix(Boston_train_crim01[,1])
lambdas = cv.glmnet(x = Boston_sinCrim, y = Boston_solocrim, alpha=1)
#plot(lambdas)
library(randomForest)
library(MASS)
library("glmnet")
set.seed(2)
mediana_crim = median(Boston$crim)
Boston_crim01 = data.frame(Boston, crim01=sign(Boston[,"crim"] - mediana_crim))
indices_train = sample(nrow(Boston_crim01), 8*nrow(Boston_crim01)%/%10, replace=FALSE)
Boston_train_crim01 = Boston_crim01[indices_train,]
Boston_test_crim01 = Boston_crim01[-indices_train,]
Boston_sinCrim = model.matrix(crim~.-crim-crim01, data=Boston_train_crim01)[,-1]
Boston_solocrim = as.matrix(Boston_train_crim01[,1])
lambdas = cv.glmnet(x = Boston_sinCrim, y = Boston_solocrim, alpha=1)
#plot(lambdas)
View(Boston_test_crim01)
View(Boston_test_crim01)
View(Boston_sinCrim)
View(Boston_sinCrim)
View(Boston_solocrim)
library(randomForest)
library(MASS)
library("glmnet")
set.seed(2)
mediana_crim = median(Boston$crim)
Boston_crim01 = data.frame(Boston, crim01=sign(Boston[,"crim"] - mediana_crim))
indices_train = sample(nrow(Boston_crim01), 8*nrow(Boston_crim01)%/%10, replace=FALSE)
Boston_train_crim01 = Boston_crim01[indices_train,]
Boston_test_crim01 = Boston_crim01[-indices_train,]
Boston_sinCrims = model.matrix(crim~.-crim-crim01, data=Boston_train_crim01)[,-1]
Boston_solocrim = as.matrix(Boston_train_crim01[,1])
lambdas = cv.glmnet(x = Boston_sinCrims, y = Boston_solocrim, alpha=1)
#plot(lambdas)
Boston_sinCrims = model.matrix(crim~.-crim-crim01, data=Boston_train_crim01)[,-1]
Boston_solocrim = as.matrix(Boston_train_crim01[,1])
lambdas = cv.glmnet(x = Boston_sinCrims, y = Boston_solocrim, alpha=1)
plot(lambdas)
Boston_sinCrims = model.matrix(crim~.-crim-crim01, data=Boston_train_crim01)[,-1]
Boston_solocrim = as.matrix(Boston_train_crim01[,1])
cv.lasso = cv.glmnet(x = Boston_sinCrims, y = Boston_solocrim, alpha=1)
plot(cv.lasso)
lasso = glmnet(x = Boston_sinCrims, y = Boston_solocrim, alpha=1)
Boston_sinCrims = model.matrix(crim~.-crim-crim01, data=Boston_train_crim01)[,-1]
Boston_solocrim = as.matrix(Boston_train_crim01[,1])
cv.lasso = cv.glmnet(x = Boston_sinCrims, y = Boston_solocrim, alpha=1)
plot(cv.lasso)
lasso = glmnet(x = Boston_sinCrims, y = Boston_solocrim, alpha=1)
lasso.coef = predict(lasso, type = "coefficients", s = cv.lasso$lambda.min)
lasso.coef
Boston_sinCrims = model.matrix(crim~.-crim-crim01, data=Boston_train_crim01)[,-1]
Boston_solocrim = as.matrix(Boston_train_crim01[,1])
cv.lasso = cv.glmnet(x = Boston_sinCrims, y = Boston_solocrim, alpha=1)
plot(cv.lasso)
lasso = glmnet(x = Boston_sinCrims, y = Boston_solocrim, alpha=1)
lasso.coef = predict(lasso, type = "coefficients", s = cv.lasso$lambda.min)
lasso.coef
Boston_sinCrims = model.matrix(crim~.-crim-crim01, data=Boston_train_crim01)[,-1]
Boston_solocrim = as.matrix(Boston_train_crim01[,1])
cv.lasso = cv.glmnet(x = Boston_sinCrims, y = Boston_solocrim, alpha=1)
plot(cv.lasso)
lasso = glmnet(x = Boston_sinCrims, y = Boston_solocrim, alpha=1)
lasso.coef = predict(lasso, type = "coefficients", s = cv.lasso$lambda.min)
lasso.coef
predictoras_0.1 <- lasso.coef[abs(lasso.coef) > 0.1 ]
predictoras_0.1
Boston_sinCrims = model.matrix(crim~.-crim-crim01, data=Boston_train_crim01)[,-1]
Boston_solocrim = as.matrix(Boston_train_crim01[,1])
cv.lasso = cv.glmnet(x = Boston_sinCrims, y = Boston_solocrim, alpha=1)
plot(cv.lasso)
lasso = glmnet(x = Boston_sinCrims, y = Boston_solocrim, alpha=1)
lasso.coef = predict(lasso, type = "coefficients", s = cv.lasso$lambda.min)
lasso.coef
predictoras_02 <- lasso.coef[abs(lasso.coef) > 0.2 ]
predictoras_02
library("MASS")
library("glmnet")
set.seed(13)
lambdas <- cv.glmnet(x = as.matrix(Boston[,-1]), y = as.matrix(Boston[,1]), alpha=1)
bestLambda <- lambdas$lambda.min
lasso.model <- glmnet(x = as.matrix(Boston[,-1]), y = as.matrix(Boston[,1]), alpha = 1, standardize = FALSE)
lasso.coef <- predict(lasso.model, type="coefficients", s=bestLambda)[1:14,]
lasso.coef
selected <- lasso.coef[abs(lasso.coef) > 0.1 ]
selected
library(randomForest)
library(MASS)
library("glmnet")
set.seed(2)
mediana_crim = median(Boston$crim)
Boston_crim01 = data.frame(Boston, crim01=sign(Boston[,"crim"] - mediana_crim))
indices_train = sample(nrow(Boston_crim01), 8*nrow(Boston_crim01)%/%10, replace=FALSE)
Boston_train_crim01 = Boston_crim01[indices_train,]
Boston_test_crim01 = Boston_crim01[-indices_train,]
Boston_sinCrims = model.matrix(crim~.-crim-crim01, data=Boston_train_crim01)[,-1]
Boston_solocrim = as.matrix(Boston_train_crim01[,1])
cv.lasso = cv.glmnet(x = Boston_sinCrims, y = Boston_solocrim, alpha=1)
plot(cv.lasso)
lasso = glmnet(x = Boston_sinCrims, y = Boston_solocrim, alpha=1)
lasso.coef = predict(lasso, type = "coefficients", s = cv.lasso$lambda.min)
lasso.coef
predictoras_02 <- lasso.coef[abs(lasso.coef) > 0.2 ]
predictoras_02
Boston_sinCrims = model.matrix(crim~.-crim-crim01, data=Boston_train_crim01)[,-1]
Boston_solocrim = as.matrix(Boston_train_crim01[,1])
cv.lasso = cv.glmnet(x = Boston_sinCrims, y = Boston_solocrim, alpha=1)
plot(cv.lasso)
lasso = glmnet(x = Boston_sinCrims, y = Boston_solocrim, alpha=1)
lasso.coef = predict(lasso, type = "coefficients", s = cv.lasso$lambda.min)[1:14,]
lasso.coef
predictoras_02 <- lasso.coef[abs(lasso.coef) > 0.2 ]
predictoras_02
library("MASS")
library("glmnet")
set.seed(13)
lambdas <- cv.glmnet(x = as.matrix(Boston[,-1]), y = as.matrix(Boston[,1]), alpha=1)
bestLambda <- lambdas$lambda.min
lasso.model <- glmnet(x = as.matrix(Boston[,-1]), y = as.matrix(Boston[,1]), alpha = 1, standardize = FALSE)
lasso.coef <- predict(lasso.model, type="coefficients", s=bestLambda)[1:14,]
lasso.coef
selected <- lasso.coef[abs(lasso.coef) > 0.1 ]
selected
Boston_sinCrims = model.matrix(crim~.-crim-crim01, data=Boston_train_crim01)[,-1]
Boston_solocrim = as.matrix(Boston_train_crim01[,1])
cv.lasso = cv.glmnet(x = Boston_sinCrims, y = Boston_solocrim, alpha=1)
plot(cv.lasso)
lasso = glmnet(x = Boston_sinCrims, y = Boston_solocrim, alpha=1)
lasso.coef = predict(lasso, type = "coefficients", s = cv.lasso$lambda.min)[1:14,]
lasso.coef
predictoras_02 <- lasso.coef[abs(lasso.coef) > 0.2 ]
predictoras_02
library(randomForest)
library(MASS)
library("glmnet")
set.seed(2)
mediana_crim = median(Boston$crim)
Boston_crim01 = data.frame(Boston, crim01=sign(Boston[,"crim"] - mediana_crim))
indices_train = sample(nrow(Boston_crim01), 8*nrow(Boston_crim01)%/%10, replace=FALSE)
Boston_train_crim01 = Boston_crim01[indices_train,]
Boston_test_crim01 = Boston_crim01[-indices_train,]
Boston_sinCrims = model.matrix(crim~.-crim-crim01, data=Boston_train_crim01)[,-1]
Boston_solocrim = as.matrix(Boston_train_crim01[,1])
cv.lasso = cv.glmnet(x = Boston_sinCrims, y = Boston_solocrim, alpha=1)
lasso = glmnet(x = Boston_sinCrims, y = Boston_solocrim, alpha=1)
lasso.coef = predict(lasso, type = "coefficients", s = cv.lasso$lambda.min)[1:14,]
lasso.coef
umbral = 0.2
predictoras_umbral <- lasso.coef[abs(lasso.coef) > umbral ]
predictoras_umbral
Boston_sinCrims = model.matrix(crim~.-crim-crim01, data=Boston_train_crim01)[,-1]
Boston_solocrim = as.matrix(Boston_train_crim01[,1])
cv.lasso = cv.glmnet(x = Boston_sinCrims, y = Boston_solocrim, alpha=1)
lasso = glmnet(x = Boston_sinCrims, y = Boston_solocrim, alpha=1)
lasso.coef = predict(lasso, type = "coefficients", s = cv.lasso$lambda.min)[1:15,]
lasso.coef
umbral = 0.2
predictoras_umbral <- lasso.coef[abs(lasso.coef) > umbral ]
predictoras_umbral
Boston_sinCrims = model.matrix(crim~.-crim-crim01, data=Boston_train_crim01)[,-1]
Boston_solocrim = as.matrix(Boston_train_crim01[,1])
cv.lasso = cv.glmnet(x = Boston_sinCrims, y = Boston_solocrim, alpha=1)
lasso = glmnet(x = Boston_sinCrims, y = Boston_solocrim, alpha=1)
lasso.coef = predict(lasso, type = "coefficients", s = cv.lasso$lambda.min)[1:14,]
lasso.coef
umbral = 0.2
predictoras_umbral <- lasso.coef[abs(lasso.coef) > umbral ]
predictoras_umbral
Boston_sinCrims = model.matrix(crim~.-crim-crim01, data=Boston_train_crim01)[,-1]
Boston_solocrim = as.matrix(Boston_train_crim01[,1])
cv.lasso = cv.glmnet(x = Boston_sinCrims, y = Boston_solocrim, alpha=1)
lasso = glmnet(x = Boston_sinCrims, y = Boston_solocrim, alpha=1)
lasso.coef = predict(lasso, type = "coefficients", s = cv.lasso$lambda.min)[1:14,]
lasso.coef
umbral = 0.1
predictoras_umbral <- lasso.coef[abs(lasso.coef) > umbral ]
predictoras_umbral
library("MASS")
library("glmnet")
set.seed(13)
lambdas <- cv.glmnet(x = as.matrix(Boston[,-1]), y = as.matrix(Boston[,1]), alpha=1)
bestLambda <- lambdas$lambda.min
lasso.model <- glmnet(x = as.matrix(Boston[,-1]), y = as.matrix(Boston[,1]), alpha = 1, standardize = FALSE)
lasso.coef <- predict(lasso.model, type="coefficients", s=bestLambda)[1:14,]
lasso.coef
selected <- lasso.coef[abs(lasso.coef) > 0.1 ]
selected
set.seed(13)
nameSelected <- names(selected[2:length(selected)])
ridge.model <- glmnet(x = as.matrix(Boston[,nameSelected]), y = matrix(Boston[,1]), alpha = 0, standardize = FALSE)
ridge.pred <- predict(ridge.model, newx = as.matrix(Boston[,nameSelected]), s=bestLambda, type = "response")
error <- mean((ridge.pred - Boston[,1])^2)
error
names(selected[2:length(selected)])
Boston_sinCrims = model.matrix(crim~.-crim-crim01, data=Boston_train_crim01)[,-1]
Boston_solocrim = as.matrix(Boston_train_crim01[,1])
cv.lasso = cv.glmnet(x = Boston_sinCrims, y = Boston_solocrim, alpha=1)
lasso = glmnet(x = Boston_sinCrims, y = Boston_solocrim, alpha=1)
lasso.coef = predict(lasso, type = "coefficients", s = cv.lasso$lambda.min)[1:14,]
lasso.coef
umbral = 0.1
predictoras_umbral <- lasso.coef[abs(lasso.coef) > umbral ]
predictoras_umbral
seleccionadas = names(predictoras_umbral[2:length(predictoras_umbral)])
library(randomForest)
library(MASS)
library("glmnet")
set.seed(2)
mediana_crim = median(Boston$crim)
Boston_crim01 = data.frame(Boston, crim01=sign(Boston[,"crim"] - mediana_crim))
indices_train = sample(nrow(Boston_crim01), 8*nrow(Boston_crim01)%/%10, replace=FALSE)
Boston_train_crim01 = Boston_crim01[indices_train,]
Boston_test_crim01 = Boston_crim01[-indices_train,]
Boston_sinCrims = model.matrix(crim~.-crim-crim01, data=Boston_train_crim01)[,-1]
Boston_solocrim = as.matrix(Boston_train_crim01[,1])
cv.lasso = cv.glmnet(x = Boston_sinCrims, y = Boston_solocrim, alpha=1)
lasso = glmnet(x = Boston_sinCrims, y = Boston_solocrim, alpha=1)
lasso.coef = predict(lasso, type = "coefficients", s = cv.lasso$lambda.min)[1:14,]
lasso.coef
umbral = 0.1
predictoras_umbral <- lasso.coef[abs(lasso.coef) > umbral ]
predictoras_umbral
seleccionadas = names(predictoras_umbral[2:length(predictoras_umbral)])
seleccionadas
wd = glmnet(x = as.matrix(Boston_test_crim01[,seleccionadas]), y = Boston_solocrim, alpha=1)
model.matrix(crim~.-crim-crim01, data=Boston_train_crim01)[,-1]
model.matrix(crim~.-seleccionadas, data=Boston_train_crim01)[,-1]
Boston_train_crim01
Boston_train_crim01[1,]
Boston_train_crim01[1,"chas"]
Boston_train_crim01[1,c("chas")]
Boston_train_crim01[1,c("chas", "black")]
Boston_train_crim01[1,c("chas", "black", seleccionadas)]
Boston_train_crim01[1,c(seleccionadas)]
Boston_train_crim01[,c(seleccionadas)]
wd = glmnet(x = as.matrix(Boston_train_crim01[,c(seleccionadas)]), y = Boston_solocrim, alpha=1)
wd = glmnet(x = as.matrix(Boston_train_crim01[,c(seleccionadas)]), y = Boston_solocrim, alpha=0)
rr = glmnet(x = as.matrix(Boston_train_crim01[,c(seleccionadas)]), y = Boston_solocrim, alpha=0)
ridge.pred <- predict(rr, newx = as.matrix(Boston_train_crim01[,c(seleccionadas)]),
s=cv.lasso$lambda.min, type = "response")
rr = glmnet(x = as.matrix(Boston_train_crim01[,c(seleccionadas)]), y = Boston_solocrim, alpha=0)
ridge.pred <- predict(rr, newx = as.matrix(Boston_train_crim01[,c(seleccionadas)]),
s=cv.lasso$lambda.min, type = "response")
error <- mean((ridge.pred - Boston_test_crim01[,1])^2)
rr = glmnet(x = as.matrix(Boston_train_crim01[,c(seleccionadas)]), y = Boston_solocrim, alpha=0)
ridge.pred <- predict(rr, newx = as.matrix(Boston_train_crim01[,c(seleccionadas)]),
s=cv.lasso$lambda.min, type = "response")
error <- mean((ridge.pred - Boston_train_crim01[,1])^2)
library("MASS")
library("glmnet")
set.seed(13)
lambdas <- cv.glmnet(x = as.matrix(Boston[,-1]), y = as.matrix(Boston[,1]), alpha=1)
bestLambda <- lambdas$lambda.min
lasso.model <- glmnet(x = as.matrix(Boston[,-1]), y = as.matrix(Boston[,1]), alpha = 1, standardize = FALSE)
lasso.coef <- predict(lasso.model, type="coefficients", s=bestLambda)[1:14,]
lasso.coef
selected <- lasso.coef[abs(lasso.coef) > 0.1 ]
selected
set.seed(13)
nameSelected <- names(selected[2:length(selected)])
ridge.model <- glmnet(x = as.matrix(Boston[,nameSelected]), y = matrix(Boston[,1]), alpha = 0, standardize = FALSE)
ridge.pred <- predict(ridge.model, newx = as.matrix(Boston[,nameSelected]), s=bestLambda, type = "response")
error <- mean((ridge.pred - Boston[,1])^2)
error
Boston_sinCrims = model.matrix(crim~.-crim-crim01, data=Boston_train_crim01)[,-1]
Boston_solocrim = as.matrix(Boston_train_crim01[,1])
cv.lasso = cv.glmnet(x = Boston_sinCrims, y = Boston_solocrim, alpha=1)
lasso = glmnet(x = Boston_sinCrims, y = Boston_solocrim, alpha=1)
lasso.coef = predict(lasso, type = "coefficients", s = cv.lasso$lambda.min)[1:14,]
lasso.coef
umbral = 0.1
predictoras_umbral <- lasso.coef[abs(lasso.coef) > umbral ]
predictoras_umbral
seleccionadas = names(predictoras_umbral[2:length(predictoras_umbral)])
rr = glmnet(x = as.matrix(Boston_train_crim01[,c(seleccionadas)]), y = Boston_solocrim, alpha=0)
ridge.pred <- predict(rr, newx = as.matrix(Boston_train_crim01[,c(seleccionadas)]),
s=cv.lasso$lambda.min, type = "response")
error <- mean((ridge.pred - Boston_train_crim01[,1])^2)
library(randomForest)
library(MASS)
library("glmnet")
set.seed(2)
mediana_crim = median(Boston$crim)
Boston_crim01 = data.frame(Boston, crim01=sign(Boston[,"crim"] - mediana_crim))
indices_train = sample(nrow(Boston_crim01), 8*nrow(Boston_crim01)%/%10, replace=FALSE)
Boston_train_crim01 = Boston_crim01[indices_train,]
Boston_test_crim01 = Boston_crim01[-indices_train,]
Boston_sinCrims = model.matrix(crim~.-crim-crim01, data=Boston_train_crim01)[,-1]
Boston_solocrim = as.matrix(Boston_train_crim01[,1])
cv.lasso = cv.glmnet(x = Boston_sinCrims, y = Boston_solocrim, alpha=1)
lasso = glmnet(x = Boston_sinCrims, y = Boston_solocrim, alpha=1)
lasso.coef = predict(lasso, type = "coefficients", s = cv.lasso$lambda.min)[1:14,]
lasso.coef
umbral = 0.1
predictoras_umbral <- lasso.coef[abs(lasso.coef) > umbral ]
predictoras_umbral
seleccionadas = names(predictoras_umbral[2:length(predictoras_umbral)])
rr = glmnet(x = as.matrix(Boston_train_crim01[,c(seleccionadas)]), y = Boston_solocrim, alpha=0)
ridge.pred <- predict(rr, newx = as.matrix(Boston_train_crim01[,c(seleccionadas)]),
s=cv.lasso$lambda.min, type = "response")
error <- mean((ridge.pred - Boston_train_crim01[,1])^2)
rr = glmnet(x = as.matrix(Boston_train_crim01[,c(seleccionadas)]), y = Boston_solocrim, alpha=0)
ridge.pred <- predict(rr, newx = as.matrix(Boston_test_crim01[,c(seleccionadas)]),
s=cv.lasso$lambda.min, type = "response")
error <- mean((ridge.pred - Boston_test_crim01[,1])^2)
pairs(Auto)
boxplot(Auto)
Predictoras = cbind(Auto$mpg, Auto$displacement, Auto$horsepower, Auto$weight, Auto$year)
colnames(Predictoras) = c("mpg", "displacement", "horsepower", "weight", "year")
library(ISLR)
pairs(Auto)
boxplot(Auto)
Predictoras = cbind(Auto$mpg, Auto$displacement, Auto$horsepower, Auto$weight, Auto$year)
colnames(Predictoras) = c("mpg", "displacement", "horsepower", "weight", "year")
print(Predictoras[c(1,2,3,4,5),])
set.seed(2)
indices_test = sample(nrow(Predictoras), 2*nrow(Predictoras)%/%10, replace=FALSE)
Predictoras_test = Predictoras[indices_test,]
Predictoras_train = Predictoras[-indices_test,]
print(Predictoras_test[c(1,2,3,4,5),])
print(Predictoras_train[c(1,2,3,4,5),])
mediana_mpg = median(Auto$mpg)
Predictoras_train_mpg01 = data.frame(Predictoras_train,
mpg01=sign(Predictoras_train[,"mpg"] - mediana_mpg))
Predictoras_test_mpg01 = data.frame(Predictoras_test,
mpg01=sign(Predictoras_test[,"mpg"] - mediana_mpg))
for(i in 1:nrow(Predictoras_test_mpg01)){
if((Predictoras_test_mpg01[i,"mpg01"]) == -1)
Predictoras_test_mpg01[i,"mpg01"] = 0
}
for(i in 1:nrow(Predictoras_train_mpg01)){
if((Predictoras_train_mpg01[i,"mpg01"]) == -1)
Predictoras_train_mpg01[i,"mpg01"] = 0
}
ajuste_rlog <- glm(mpg01 ~ displacement + horsepower + weight + year,
data= Predictoras_train_mpg01, family=binomial)
probabilidades = predict(ajuste_rlog, Predictoras_test_mpg01, type="response")
probabilidades01 = rep(1,dim(Predictoras_test_mpg01)[1])
probabilidades01[probabilidades<0.5] = 0
matriz_confusion = table(probabilidades01, Predictoras_test_mpg01$mpg01)
print(matriz_confusion)
error = (matriz_confusion[1,2] + matriz_confusion[2,1])/sum(matriz_confusion)
print(error)
library(class)
library(e1071)
set.seed(2)
View(Predictoras_train_mpg01)
View(Predictoras_train_mpg01)
View(Predictoras_test_mpg01)
View(Predictoras_test_mpg01)
rbind(Predictoras_test_mpg01[,-columnas],
Predictoras_train_mpg01[,-columnas])
rbind(Predictoras_test_mpg01[,-columnas],
Predictoras_train_mpg01[,-columnas])
columnas=  dim(Predictoras_train_mpg01)[2]
datos_normalizados = scale(rbind(Predictoras_test_mpg01[,-columnas],
Predictoras_train_mpg01[,-columnas]))
test_normalizada = datos_normalizados[1:dim(Predictoras_test_mpg01)[1],]
train_normalizada = datos_normalizados[(dim(Predictoras_test_mpg01)[1] +1):
dim(datos_normalizados)[1],]
View(datos_normalizados)
View(datos_normalizados)
rbind(Predictoras_test_mpg01[,-columnas],
Predictoras_train_mpg01[,-columnas])
library(randomForest)
library(MASS)
library("glmnet")
set.seed(2)
mediana_crim = median(Boston$crim)
Boston_crim01 = data.frame(Boston, crim01=sign(Boston[,"crim"] - mediana_crim))
indices_train = sample(nrow(Boston_crim01), 8*nrow(Boston_crim01)%/%10, replace=FALSE)
Boston_train_crim01 = Boston_crim01[indices_train,]
Boston_test_crim01 = Boston_crim01[-indices_train,]
Boston_sinCrims = model.matrix(crim~.-crim-crim01, data=Boston_train_crim01)[,-1]
Boston_solocrim = as.matrix(Boston_train_crim01[,1])
cv.lasso = cv.glmnet(x = Boston_sinCrims, y = Boston_solocrim, alpha=1)
lasso = glmnet(x = Boston_sinCrims, y = Boston_solocrim, alpha=1)
lasso.coef = predict(lasso, type = "coefficients", s = cv.lasso$lambda.min)[1:14,]
lasso.coef
umbral = 0.1
predictoras_umbral <- lasso.coef[abs(lasso.coef) > umbral ]
predictoras_umbral
seleccionadas = names(predictoras_umbral[2:length(predictoras_umbral)])
rr = glmnet(x = as.matrix(Boston_train_crim01[,c(seleccionadas)]), y = Boston_solocrim, alpha=0)
ridge.pred <- predict(rr, newx = as.matrix(Boston_test_crim01[,c(seleccionadas)]),
s=cv.lasso$lambda.min, type = "response")
error <- mean((ridge.pred - Boston_test_crim01[,1])^2)
model.matrix(crim~.-crim-crim01, data=Boston_train_crim01)[,-1]
model.matrix(crim~.-crim-crim01, data=Boston_train_crim01)
XBostonSVM2
