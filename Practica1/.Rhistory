hello <- function() {
print("Hello, world!")
}
hello()
simula_unif(N, dim, rango) <- function() {
print("Hello, world!")
}
}
}
simula_unif <- function(N,dim,rango) {
print("Hello, world!")
}
hello()
simula_unif(5,5,5)
simula_unif()
simula_unif(2,2,2,2)
print(N)
}
simula_unif <- function(N,dim,rango) {
print(N)
}
simula_unif(5,5,5)
simula_unif(5,6,7)
simula_unif(2,6,7)
simula_unif <- function(N, dim, rango) {
vec = vector("numeric", length = dim)
print(vec)
}
simula_unif(2,6,7)
simula_unif <- function(N, dim, rango) {
casos=1:rango
sample(casos, replace = TRUE, dim)
print(casos)
}
simula_unif(2,6,7)
simula_unif(2,6,7)
simula_unif(2,6,7)
simula_unif(2,6,7)
simula_unif(2,6,7)
simula_unif(2,6,7)
casos=1:6
sample(casos, replace = TRUE,2)
sample(casos, replace = TRUE,2)
simula_unif <- function(N, dim, rango) {
casos=1:rango
sample(casos, replace = TRUE, dim)
}
simula_unif(2,6,7)
simula_unif(2,6,7)
simula_unif(2,6,17)
simula_unif(2,6,17)
simula_unif(2,6,17)
simula_unif <- function(N, dim, rango) {
casos=1:rango
mi_vector = sample(casos, replace = TRUE, dim)
print(mi_vector)
}
simula_unif(2,6,17)
simula_unif(2,6,17)
simula_unif(2,6,17)
simula_unif(2,6,17)
simula_unif(2,6,17)
simula_unif(2,5,17)
simula_unif(2,5,17)
simula_unif <- function(N, dim, rango) {
casos=1:rango            #valores en el intervalo rango
mi_vector = sample(casos, replace = TRUE, dim)  #vector de tamanio dim con valores aleatorios en el intervalo 1-rango
mi_lista = list(mi_vector)
print(mi_vector)
print(mi_lista)
}
simula_unif(2,5,17)
mi_lista = list(mi_vector)
print("vector" mi_vector)
print(mi_lista)
mi_lista = list(mi_vector, lenght=N)
mi_lista = list(mi_vector, length=N)
mi_lista = list(mi_vector)
simula_unif <- function(N, dim, rango) {
casos=1:rango            #valores en el intervalo rango
mi_vector = sample(casos, replace = TRUE, dim)  #vector de tamanio dim con valores aleatorios en el intervalo 1-rango
mi_lista = list(mi_vector)
print(mi_vector)
print(mi_lista)
}
simula_unif <- function(N, dim, rango) {
casos=1:rango            #valores en el intervalo rango
mi_vector = sample(casos, replace = TRUE, dim)  #vector de tamanio dim con valores aleatorios en el intervalo 1-rango
mi_lista = list(mi_vector,length=N)
print(mi_vector)
print(mi_lista)
}
simula_unif(2,5,17)
?list
example("list")
example(list)
?list
simula_unif <- function(N, dim, rango) {
casos=1:rango            #valores en el intervalo rango
mi_vector = sample(casos, replace = TRUE, dim)  #vector de tamanio dim con valores aleatorios en el intervalo 1-rango
mi_lista = list(mi_vector)
print(mi_vector)
return(mi_lista)
}
simula_unif(2,5,17)
simula_unif <- function(N, dim, rango) {
casos=1:rango            #valores en el intervalo rango
mi_vector = sample(casos, replace = TRUE, dim)  #vector de tamanio dim con valores aleatorios en el intervalo 1-rango
mi_lista = list(mi_vector)
return(mi_lista)
}
simula_unif(2,5,17)
simula_unif <- function(N, dim, rango) {
casos=1:rango            #valores en el intervalo rango
mi_vector = sample(casos, replace = TRUE, dim)  #vector de tamanio dim con valores aleatorios en el intervalo 1-rango
mi_lista = list(rep(mi_vector, N))
return(mi_lista)
}
simula_unif(2,5,17)
simula_unif <- function(N, dim, rango) {
casos=1:rango            #valores en el intervalo rango
mi_vector = sample(casos, replace = TRUE, dim)  #vector de tamanio dim con valores aleatorios en el intervalo 1-rango
mi_lista = list()
mi_lista = list(mi_lista, mi_vector)
return(mi_lista)
}
simula_unif(2,5,17)
simula_unif <- function(N, dim, rango) {
casos=1:rango            #valores en el intervalo rango
mi_vector = sample(casos, replace = TRUE, dim)  #vector de tamanio dim con valores aleatorios en el intervalo 1-rango
mi_lista = list(mi_lista, mi_vector)
return(mi_lista)
}
simula_unif(2,5,17)
simula_unif <- function(N, dim, rango) {
casos=1:rango            #valores en el intervalo rango
mi_vector = sample(casos, replace = TRUE, dim)  #vector de tamanio dim con valores aleatorios en el intervalo 1-rango
mi_lista = list(null)
mi_lista = list(mi_lista, mi_vector)
return(mi_lista)
}
simula_unif(2,5,17)
simula_unif <- function(N, dim, rango) {
casos=1:rango            #valores en el intervalo rango
ini_vector = sample(casos, replace = TRUE, dim)  #vector de tamanio dim con valores aleatorios en el intervalo 1-rango
mi_lista = list(ini_vector)
for( i in 1:N){
ini_vector = sample(casos, replace = TRUE, dim)  #vector de tamanio dim con valores aleatorios en el intervalo 1-rango
mi_lista = list(ini_vector)
mi_lista = list(mi_lista, mi_vector)
}
return(mi_lista)
}
simula_unif(2,5,17)
simula_unif <- function(N, dim, rango) {
casos=1:rango            #valores en el intervalo rango
ini_vector = sample(casos, replace = TRUE, dim)  #vector de tamanio dim con valores aleatorios en el intervalo 1-rango
mi_lista = list(ini_vector)
for( i in 1:N){
ini_vector = sample(casos, replace = TRUE, dim)  #vector de tamanio dim con valores aleatorios en el intervalo 1-rango
mi_lista = list(mi_lista, ini_vector)
}
return(mi_lista)
}
simula_unif(2,5,17)
simula_unif <- function(N, dim, rango) {
casos=1:rango            #valores en el intervalo rango
ini_vector = sample(casos, replace = TRUE, dim)  #vector de tamanio dim con valores aleatorios en el intervalo 1-rango
mi_lista = list(ini_vector)
for( i in 2:N){
ini_vector = sample(casos, replace = TRUE, dim)  #vector de tamanio dim con valores aleatorios en el intervalo 1-rango
mi_lista = list(mi_lista, ini_vector)
}
return(mi_lista)
}
simula_unif(2,5,17)
simula_unif <- function(N, dim, rango) {
casos=1:rango            #valores en el intervalo rango
ini_vector = sample(casos, replace = TRUE, dim)  #vector de tamanio dim con valores aleatorios en el intervalo 1-rango
#mi_lista = list(ini_vector)
for( i in 2:N){
mi_lista = list(mi_lista, ini_vector)
ini_vector = sample(casos, replace = TRUE, dim)  #vector de tamanio dim con valores aleatorios en el intervalo 1-rango
}
return(mi_lista)
}
simula_unif(2,5,17)
simula_unif <- function(N, dim, rango) {
if(N>0){
casos=1:rango            #valores en el intervalo rango
ini_vector = sample(casos, replace = TRUE, dim)  #vector de tamanio dim con valores aleatorios en el intervalo 1-rango
mi_lista = list(ini_vector)
for( i in 2:N){
ini_vector = sample(casos, replace = TRUE, dim)  #vector de tamanio dim con valores aleatorios en el intervalo 1-rango
mi_lista = list(mi_lista, ini_vector)
}
}
else
print("No se da un tamanio correcto.")
return(mi_lista)
}
simula_unif(1,5,17)
simula_unif(0,5,17)
simula_unif <- function(N, dim, rango) {
if(N>0){
casos=1:rango            #valores en el intervalo rango
ini_vector = sample(casos, replace = TRUE, dim)  #vector de tamanio dim con valores aleatorios en el intervalo 1-rango
mi_lista = list(ini_vector)
for( i in 2:N){
ini_vector = sample(casos, replace = TRUE, dim)  #vector de tamanio dim con valores aleatorios en el intervalo 1-rango
mi_lista = list(mi_lista, ini_vector)
}
}
else{
print("No se da un tamanio correcto.")
mi_lista = list(NaN)
}
return(mi_lista)
}
simula_unif(0,5,17)
simula_unif(1,5,17)
simula_unif <- function(N, dim, rango) {
if(N>0){
casos=1:rango            #valores en el intervalo rango
ini_vector = sample(casos, replace = TRUE, dim)  #vector de tamanio dim con valores aleatorios en el intervalo 1-rango
mi_lista = list(ini_vector)
for( i in 1:N-1){
ini_vector = sample(casos, replace = TRUE, dim)  #vector de tamanio dim con valores aleatorios en el intervalo 1-rango
mi_lista = list(mi_lista, ini_vector)
}
}
else{
print("No se da un tamanio correcto.")
mi_lista = list(NaN)
}
return(mi_lista)
}
simula_unif(1,5,17)
simula_unif <- function(N, dim, rango) {
if(N>0){
casos=1:rango            #valores en el intervalo rango
ini_vector = sample(casos, replace = TRUE, dim)  #vector de tamanio dim con valores aleatorios en el intervalo 1-rango
mi_lista = list(ini_vector)
for( i in 0:N-1){
ini_vector = sample(casos, replace = TRUE, dim)  #vector de tamanio dim con valores aleatorios en el intervalo 1-rango
mi_lista = list(mi_lista, ini_vector)
}
}
else{
print("No se da un tamanio correcto.")
mi_lista = list(NaN)
}
return(mi_lista)
}
simula_unif(1,5,17)
simula_unif(2,5,17)
simula_unif <- function(N, dim, rango) {
if(N>0){
casos=1:rango            #valores en el intervalo rango
ini_vector = sample(casos, replace = TRUE, dim)  #vector de tamanio dim con valores aleatorios en el intervalo 1-rango
mi_lista = list(ini_vector)
for( i in 1:N-1){
ini_vector = sample(casos, replace = TRUE, dim)  #vector de tamanio dim con valores aleatorios en el intervalo 1-rango
mi_lista = list(mi_lista, ini_vector)
}
}
else{
print("No se da un tamanio correcto.")
mi_lista = list(NaN)
}
return(mi_lista)
}
simula_unif(2,5,17)
simula_unif <- function(N, dim, rango) {
if(N>0){
casos=1:rango            #valores en el intervalo rango
ini_vector = sample(casos, replace = TRUE, dim)  #vector de tamanio dim con valores aleatorios en el intervalo 1-rango
mi_lista = list(ini_vector)
for( i in 1:N){
ini_vector = sample(casos, replace = TRUE, dim)  #vector de tamanio dim con valores aleatorios en el intervalo 1-rango
mi_lista = list(mi_lista, ini_vector)
}
}
else{
print("No se da un tamanio correcto.")
mi_lista = list(NaN)
}
return(mi_lista)
}
simula_unif(2,5,17)
simula_unif <- function(N, dim, rango) {
if(N>0){
casos=1:rango            #valores en el intervalo rango
mi_lista = list()
length(mi_lista) = N;
for( i in 1:N){
ini_vector = sample(casos, replace = TRUE, dim)  #vector de tamanio dim con valores aleatorios en el intervalo 1-rango
mi_lista[i] = ini_vector
}
}
else{
print("No se da un tamanio correcto.")
mi_lista = list(NaN)
}
return(mi_lista)
}
simula_unif(2,5,17)
simula_unif <- function(N, dim, rango) {
if(N>0){
casos=1:rango            #valores en el intervalo rango
mi_lista = list()
length(mi_lista) = N;
print(mi_lista)
for( i in 1:N){
ini_vector = sample(casos, replace = TRUE, dim)  #vector de tamanio dim con valores aleatorios en el intervalo 1-rango
mi_lista[i] = ini_vector
}
}
else{
print("No se da un tamanio correcto.")
mi_lista = list(NaN)
}
return(mi_lista)
}
simula_unif(2,5,17)
simula_unif <- function(N, dim, rango) {
if(N>0){
casos=1:rango            #valores en el intervalo rango
mi_lista = list(vector)
length(mi_lista) = N;
print(mi_lista)
for( i in 1:N){
ini_vector = sample(casos, replace = TRUE, dim)  #vector de tamanio dim con valores aleatorios en el intervalo 1-rango
mi_lista[i] = ini_vector
}
}
else{
print("No se da un tamanio correcto.")
mi_lista = list(NaN)
}
return(mi_lista)
}
simula_unif(2,5,17)
simula_unif <- function(N, dim, rango) {
if(N>0){
casos=1:rango            #valores en el intervalo rango
mi_lista = list()
length(mi_lista) = N;
print(mi_lista)
#  for( i in 1:N){
ini_vector = sample(casos, replace = TRUE, dim)  #vector de tamanio dim con valores aleatorios en el intervalo 1-rango
mi_lista[i] = ini_vector
#  }
}
else{
print("No se da un tamanio correcto.")
mi_lista = list(NaN)
}
return(mi_lista)
}
simula_unif(2,5,17)
simula_unif <- function(N, dim, rango) {
if(N>0){
casos=1:rango            #valores en el intervalo rango
mi_lista = list()
length(mi_lista) = N;
print(mi_lista)
#  for( i in 1:N){
ini_vector = sample(casos, replace = TRUE, dim)  #vector de tamanio dim con valores aleatorios en el intervalo 1-rango
mi_lista[1] = ini_vector
#  }
}
else{
print("No se da un tamanio correcto.")
mi_lista = list(NaN)
}
return(mi_lista)
}
simula_unif(2,5,17)
simula_unif <- function(N, dim, rango) {
if(N>0){
casos=1:rango            #valores en el intervalo rango
ini_vector = sample(casos, replace = TRUE, dim)  #vector de tamanio dim con valores aleatorios en el intervalo 1-rango
mi_lista = list(ini_vector)
length(mi_lista) = N;
print(mi_lista)
#  for( i in 1:N){
ini_vector = sample(casos, replace = TRUE, dim)  #vector de tamanio dim con valores aleatorios en el intervalo 1-rango
#  mi_lista[1] = ini_vector
#  }
}
else{
print("No se da un tamanio correcto.")
mi_lista = list(NaN)
}
return(mi_lista)
}
simula_unif(2,5,17)
simula_unif <- function(N, dim, rango) {
if(N>0){
casos=1:rango            #valores en el intervalo rango
ini_vector = sample(casos, replace = TRUE, dim)  #vector de tamanio dim con valores aleatorios en el intervalo 1-rango
mi_lista = list(ini_vector)
length(mi_lista) = N;
print(mi_lista)
for( i in 1:N){
ini_vector = sample(casos, replace = TRUE, dim)  #vector de tamanio dim con valores aleatorios en el intervalo 1-rango
mi_lista[i+1] = ini_vector
}
}
else{
print("No se da un tamanio correcto.")
mi_lista = list(NaN)
}
return(mi_lista)
}
simula_unif(2,5,17)
